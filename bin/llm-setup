#!/bin/bash
set -euo pipefail

# llm-setup - Set up LLM instruction files for an existing project
# Creates project-specific LLM configuration files for AI development

# Global configuration
# Auto-detect pbproject root based on script location (resolve symlinks)
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
PBPROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
SCRIPT_NAME="$(basename "$0")"

show_help() {
    cat <<EOF
$SCRIPT_NAME - Set up LLM instruction files for an existing project

USAGE:
    $SCRIPT_NAME [--status|--help]

COMMANDS:
    (default)   Set up LLM instruction files in current directory
    --status    Show current status of LLM instruction files
    --help      Show this help message

DESCRIPTION:
    Sets up LLM instruction files for an existing project. Creates a main
    LLM_INSTRUCTIONS.md file and independent copies for all AI tools.
    
    Files created:
    - LLM_INSTRUCTIONS.md (Main instruction template - customize this!)
    - AGENTS.md (OpenCode instructions)
    - CLAUDE.md (Claude Desktop instructions)
    - GEMINI.md (Gemini CLI instructions)
    - .github/copilot-instructions.md (GitHub Copilot instructions)
    - .roo/rules/00-general.md (Roo general rules)

EXAMPLES:
    $SCRIPT_NAME                    # Set up LLM files in current project
    $SCRIPT_NAME --status           # Check current status

NEXT STEPS:
    After running this command:
    1. The LLM_INSTRUCTIONS.md contains TODO items for project analysis
    2. Run your AI assistant (Claude, etc.) and tell it:
       "Follow the LLM_INSTRUCTIONS.md setup process"
    3. The AI will analyze your project and customize the instructions

BACKUP:
    Existing files are backed up to /tmp/llm-backup-YYYY-MM-DD-HHMMSS/
    before being replaced.
EOF
}

error() {
    echo "‚ùå Error: $1" >&2
    exit 1
}

info() {
    echo "‚ÑπÔ∏è  $1"
}

success() {
    echo "‚úÖ $1"
}

check_pbproject() {
    if [[ ! -d "$PBPROJECT_ROOT" ]]; then
        error "pbproject directory not found at $PBPROJECT_ROOT"
    fi

    local missing_files=()
    [[ ! -f "$PBPROJECT_ROOT/project-templates/LLM_INSTRUCTIONS.md" ]] && missing_files+=("LLM_INSTRUCTIONS.md")
    [[ ! -d "$PBPROJECT_ROOT/project-templates/github" ]] && missing_files+=("github/")
    [[ ! -d "$PBPROJECT_ROOT/project-templates/roo" ]] && missing_files+=("roo/")

    if [[ ${#missing_files[@]} -gt 0 ]]; then
        error "Missing template files in pbproject: ${missing_files[*]}"
    fi
}

create_backup() {
    local backup_dir="/tmp/llm-backup-$(date +%Y-%m-%d-%H%M%S)"
    local files_to_backup=()
    
    # Check which files exist and need backup
    [[ -e "LLM_INSTRUCTIONS.md" ]] && files_to_backup+=("LLM_INSTRUCTIONS.md")
    [[ -e "AGENTS.md" ]] && files_to_backup+=("AGENTS.md")
    [[ -e "CLAUDE.md" ]] && files_to_backup+=("CLAUDE.md")
    [[ -e "GEMINI.md" ]] && files_to_backup+=("GEMINI.md")
    [[ -e ".github" ]] && files_to_backup+=(".github")
    [[ -e ".roo" ]] && files_to_backup+=(".roo")
    
    if [[ ${#files_to_backup[@]} -eq 0 ]]; then
        return 0
    fi
    
    info "Creating backup of existing files"
    mkdir -p "$backup_dir"
    
    for file in "${files_to_backup[@]}"; do
        if [[ -f "$file" ]]; then
            cp "$file" "$backup_dir/$file"
        elif [[ -d "$file" ]]; then
            mkdir -p "$backup_dir/$(dirname "$file")"
            cp -r "$file" "$backup_dir/$file"
        fi
    done
    
    success "Backed up existing files to: $backup_dir"
    echo "$backup_dir"
}

setup_llm_files() {
    check_pbproject
    
    local backup_dir
    backup_dir=$(create_backup)
    
    info "Setting up LLM instruction files for existing project"
    
    # Remove existing files/symlinks if they exist
    [[ -e "LLM_INSTRUCTIONS.md" ]] && rm -f "LLM_INSTRUCTIONS.md"
    [[ -e "AGENTS.md" ]] && rm -f "AGENTS.md"
    [[ -e "CLAUDE.md" ]] && rm -f "CLAUDE.md"
    [[ -e "GEMINI.md" ]] && rm -f "GEMINI.md"
    [[ -e ".github" ]] && rm -rf ".github"
    [[ -e ".roo" ]] && rm -rf ".roo"
    
    # Create main instruction file (copy, not symlink)
    cp "$PBPROJECT_ROOT/project-templates/LLM_INSTRUCTIONS.md" "LLM_INSTRUCTIONS.md"
    success "üìù Created LLM_INSTRUCTIONS.md (template with TODO items)"
    
    # Create symlinks for all AI tools
    ln -sf "LLM_INSTRUCTIONS.md" "AGENTS.md"
    success "üìÑ Created AGENTS.md (symlink to LLM_INSTRUCTIONS.md)"
    
    ln -sf "LLM_INSTRUCTIONS.md" "CLAUDE.md"
    success "üìÑ Created CLAUDE.md (symlink to LLM_INSTRUCTIONS.md)"
    
    ln -sf "LLM_INSTRUCTIONS.md" "GEMINI.md"
    success "üìÑ Created GEMINI.md (symlink to LLM_INSTRUCTIONS.md)"
    
    # Copy directory structures and create symlinks for instruction files
    cp -r "$PBPROJECT_ROOT/project-templates/github" ".github"
    ln -sf "../LLM_INSTRUCTIONS.md" ".github/copilot-instructions.md"
    success "üìÅ Created .github/ with symlinked copilot-instructions.md"
    
    cp -r "$PBPROJECT_ROOT/project-templates/roo" ".roo"
    ln -sf "../LLM_INSTRUCTIONS.md" ".roo/rules/00-general.md"
    success "üìÅ Created .roo/ with symlinked rules/00-general.md"
    
    echo
    info "üöÄ Next steps:"
    echo "   1. Open your AI assistant (Claude, etc.)"
    echo "   2. Tell it: 'Follow the LLM_INSTRUCTIONS.md setup process'"
    echo "   3. The AI will analyze your project and customize all instruction files"
    echo
    info "All AI tool configs are symlinked to LLM_INSTRUCTIONS.md - edit one file to update all!"
}

show_status() {
    info "LLM instruction file status for: $PWD"
    echo
    
    local all_files=("LLM_INSTRUCTIONS.md" "AGENTS.md" "CLAUDE.md" "GEMINI.md" ".github/copilot-instructions.md" ".roo/rules/00-general.md")
    local directories=(".github" ".roo")
    
    local present=()
    local missing=()
    
    # Check all files
    for file in "${all_files[@]}"; do
        if [[ -f "$file" ]]; then
            present+=("$file")
        else
            missing+=("$file")
        fi
    done
    
    # Check directories
    for dir in "${directories[@]}"; do
        if [[ -d "$dir" ]]; then
            present+=("$dir/")
        else
            missing+=("$dir/")
        fi
    done
    
    if [[ ${#present[@]} -gt 0 ]]; then
        echo "üìÅ Present:"
        for file in "${present[@]}"; do
            echo "   $file"
        done
        echo
    fi
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        echo "‚ùì Missing:"
        for file in "${missing[@]}"; do
            echo "   $file"
        done
        echo
        info "Run '$SCRIPT_NAME' to create missing LLM instruction files"
    else
        info "All LLM instruction files are present and independent"
        info "Ready for project-specific customization!"
    fi
}

main() {
    case "${1:-}" in
    "--status")
        show_status
        ;;
    "--help" | "-h" | "help")
        show_help
        ;;
    "")
        setup_llm_files
        ;;
    *)
        error "Unknown option: $1. Use '$SCRIPT_NAME --help' for usage information."
        ;;
    esac
}

main "$@"